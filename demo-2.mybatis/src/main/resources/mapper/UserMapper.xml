<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	1. mapper > UserMapper 인터페이스와 연결 xml 파일
	1.1 조건 namespace = "kr.or.kosa.mapper.UserMapper" 같아야됨 써주면...
	1.2 조건 mapper > UserMapper 인터페이스 있는 함수이름을 그대로 사용 동기화 id="selectAll"

	List<User> selectAll(); //목록조회
	User seleById(long id); //상세조회
	void insert(User user);
	void update(User user);
	void delete(User user);
	
	#{string} => 'string'
	#{int} => 0
	${string} => string (LIKE 할 때 , 컬럼명, 테이블명)

 -->
<mapper namespace="kr.or.kosa.mapper.UserMapper">
	<!-- 내가 만든 DTO클래스가 DB컬럼이랑 다를 때 사용하는 공식적인 방법 -->
	
	<!--  
	<resultMap type="kr.or.kosa.model.User" id="userResultMap">
		<id property="userid" column="id"></id>
		<result property="u" column="username"></result>
		<result property="p" column="password"></result>
		<result property="e" column="email"></result>
	</resultMap>
	-->

	<resultMap type="kr.or.kosa.model.User" id="userResultMap">
	    <id property="id" column="id"></id>
	    <result property="username" column="username"></result>
	    <result property="password" column="password"></result>
	    <result property="email" column="email"></result>
	</resultMap>

	<select id="selectAll" resultMap="userResultMap">
	    SELECT id, username, password, email FROM users
	</select>	

	<select id="selectById" parameterType="long" resultMap="userResultMap">
	    SELECT id, username, password, email FROM users WHERE id=#{id}
	</select>	

	<insert id="insert" parameterType="kr.or.kosa.model.User">
		INSERT INTO USERS (id, username, password, email)
		VALUES(USER_ID.NEXTVAL,#{username},'1004',#{email})
	</insert>
	
	<update id="update" parameterType = "kr.or.kosa.model.User">
		UPDATE users
		SET username = #{username}, email = #{email}
		WHERE id = #{id}
	</update>
	
	<delete id="delete" parameterType = "kr.or.kosa.model.User">
		DELETE FROM users WHERE id = #{id}
	</delete>
</mapper>
