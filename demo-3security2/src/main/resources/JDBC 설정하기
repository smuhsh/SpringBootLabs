-- user
CREATE TABLE `user` (
  `USER_NO` int NOT NULL AUTO_INCREMENT,
  `USER_ID` varchar(100) NOT NULL,
  `USER_PW` varchar(200) NOT NULL,
  `NAME` varchar(100) NOT NULL,
  `EMAIL` varchar(200) DEFAULT NULL,
  `REG_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UPD_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `ENABLED` int DEFAULT 1,
  PRIMARY KEY (`USER_NO`)
) COMMENT='회원';

-- user_auth
CREATE TABLE `user_auth` (
      auth_no int NOT NULL AUTO_INCREMENT       -- 권한번호
    , user_id varchar(100) NOT NULL             -- 아이디
    , auth varchar(100) NOT NULL                -- 권한 (ROLE_USER, ROLE_ADMIN, ...)
    , PRIMARY KEY(auth_no)
);

select * from user;

insert into user(user_id,user_pw,name,email)
values('user','$2a$12$XaNpE2vVBM7x4ZCqlafgxu2W5vw9SXnvMgUZQnzOkFSZt605JHuqq','사용자','user@naver.com');

insert into user(user_id,user_pw,name,email)
values('admin','$2a$12$XaNpE2vVBM7x4ZCqlafgxu2W5vw9SXnvMgUZQnzOkFSZt605JHuqq','관리자','admin@naver.com');


-- 권한
insert into user_auth(user_id , auth)
values('user','ROLE_USER');

-- 관리자
insert into user_auth(user_id , auth)
values('admin','ROLE_USER');
insert into user_auth(user_id , auth)
values('admin','ROLE_ADMIN');




select * from user_auth;


select u.user_id, a.auth  
from user  u join user_auth a on u.USER_ID = a.user_id
where a.user_id='admin'; 

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
2. 세팅
DB작업
properties 파일에 설정

spring.datasource.url=jdbc:mysql://localhost:3305/shop
spring.datasource.username=root
spring.datasource.password=1004
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect




4. 
	//DB연결 객체 (DataSource)
	@Autowired
	private DataSource datasource;

   //JDBC 인증방식
   	@Bean
   	public UserDetailsService userDetailsService() {

   		JdbcUserDetailsManager userDetailsManager = new JdbcUserDetailsManager(datasource);

   		//사용자 인증 쿼리
   		String sql1 = "select user_id as username , user_pw as password , enabled from user where user_id=?";

   		//사용자 권한 쿼리
   		String sql2 = "select user_id as username , auth from user_auth where user_id=?";

   		userDetailsManager.setUsersByUsernameQuery(sql1); //계정 비번 확인
   		userDetailsManager.setAuthoritiesByUsernameQuery(sql2);

   		return userDetailsManager;
   	}

   	5. @Bean
       	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
       		//http.csrf().disable();
       		//http.formLogin().disable();


       		http.authorizeRequests()
       				.antMatchers("/admin","/admin/**").hasRole("ADMIN")
       				.antMatchers("/user","/user/**").hasAnyRole("USER","ADMIN")
       				.antMatchers("/css/**" , "/js/**" , "/imges/**").permitAll()
       				.antMatchers("/**").permitAll()
       				.anyRequest().authenticated();
       				//설정하지 않는 모든 경로 요청에 대해서 인증된 사용자만 접근 가능
       			http.formLogin();
       		return http.build();
       	}

     6. View  에서 개체 활용 화면 정의
        <th:block sec:authorize="hasAnyRole('ROLE_USER','ROLE_ADMIN')">
                 <li>
                     <a href="/user">사용자</a>
                 </li>
             </th:block>
             <!-- 관리자 메뉴 -->
             <th:block sec:authorize="hasRole('ROLE_ADMIN')">
                 <li>
                     <a href="/admin">관리자</a>
                 </li>
             </th:block>

             <!-- 비로그인시  인증되지 않은 사용자라면-->
             <th:block sec:authorize="isAnonymous()">
                     <li>
                         <a href="/login">로그인</a>
                         <a href="/join">회원가입</a>
                     </li>
             </th:block>
             <!-- 로그인시 -->
             <th:block sec:authorize="isAuthenticated">
                     <li>
                         <a href="/logout">로그아웃</a>
                     </li>
             </th:block>
         </ul>

     7. Controller 정의 view 정의
    @Slf4j
    @Controller
    public class HomeController {

        @GetMapping({"","/"})
        public String home(Model model, Principal principal){
            String loginId = principal !=null ? principal.getName() : "guest";
            model.addAttribute("loginId",loginId);
            return "index";
        }

    8. 페이지 테스트 ....
------------------------------------------------------------------------------------------------------------------------

1. in memory
2. jdbc
security  전반적인 이해 .. 현업 ....
3. Mybatis  >>  mapper  >> DTO >> interface >> DAO interface (CRUD ... select, select 함수)  >> mapper.xml >> <select ...>
3.1 DTO  user   user_auth
한명의 USER 가 여러개의 권한을 가질 수 있다 ....


board  comment

class Board {
  List<comment> comments;
}
POINT >>

-----------------------
JPA
@Entity

@ManytoMany
foreign key ....
1:1
1:N
N:1
M:N

USER
1:N
USER_AUTH

@저장소 (CRUD)
---------------------------